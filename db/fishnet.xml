<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.1 (Build 792)" ts="2017-07-17 16:05:10">
<Class name="fishnet.Coordinate">
<StorageStrategy/>
<Super>%SerialObject,%Populate</Super>
<TimeChanged>64481,46201.981274</TimeChanged>
<TimeCreated>64479,59415.226035</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Широта

]]></Content>
</UDLText>

<Property name="latitude">
<Type>%Decimal</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Долгота

]]></Content>
</UDLText>

<Property name="longtude">
<Type>%Decimal</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>CoordinateState</State>
<StreamLocation>^fishnet.CoordinateS</StreamLocation>
<Data name="CoordinateState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>latitude</Value>
</Value>
<Value name="2">
<Value>longtude</Value>
</Value>
</Data>
</Storage>
</Class>


<Package name="fishnet" sqlname="fishnet"/>


<Class name="fishnet.Region">
<StorageStrategy/>
<Super>%Persistent</Super>
<TimeChanged>64481,57900.471035</TimeChanged>
<TimeCreated>64479,59414.858678</TimeCreated>

<Property name="name">
<Type>%String</Type>
</Property>

<Property name="coordinates">
<Type>fishnet.Coordinate</Type>
<Collection>list</Collection>
</Property>

<Method name="GetRegion">
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set region = ##class(fishnet.Region).%OpenId(id,,.sc)
	
	quit:$$$ISERR(sc) sc
	
	set proxy = {}
	
	set proxy.name = region.name
	
	set proxy.coordinates = []
	
	for i=1:1:region.coordinates.Count(){
		set point = {}
		set point.longtude = region.coordinates.GetAt(i).longtude
		set point.latitude = region.coordinates.GetAt(i).latitude		
		do proxy.coordinates.%Push(point)	
	}	
	quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="SetPointForRegion">
<FormalSpec>latitude:%Decimal,longtude:%Decimal</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set coord = ##class(fishnet.Coordinate).%New()
	set coord.latitude = latitude
	set coord.longtude = longtude
	do ..coordinates.Insert(coord)
	do ..%Save()
	q $$$OK
]]></Implementation>
</Method>

<Method name="SaveNewRegion">
<Implementation><![CDATA[
	set st = $$$OK
		
	try{	
	
	$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data,1))
      	
      	// Open region by ID
      	set region = ##class(fishnet.Region).%OpenId(data.id,,.st)
      	
      	// If can't open-create new
      	if $$$ISERR(st) set region = ##class(fishnet.Region).%New()
      	
      	set region.name = $ZCONVERT(data.name, "I", "UTF8")
      	set region.coordinates = $ZCONVERT(data.coordinates, "I", "UTF8")     		
		$$$THROWONERROR(st, region.%Save())
	}
	catch ex{
		s st=st.AsStatus()
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^fishnet.RegionD</DataLocation>
<DefaultData>RegionDefaultData</DefaultData>
<IdLocation>^fishnet.RegionD</IdLocation>
<IndexLocation>^fishnet.RegionI</IndexLocation>
<StreamLocation>^fishnet.RegionS</StreamLocation>
<Data name="RegionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>name</Value>
</Value>
<Value name="3">
<Value>coordinates</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
