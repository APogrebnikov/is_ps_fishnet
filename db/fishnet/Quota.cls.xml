<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="fishnet.Quota">
<Super>%Persistent</Super>
<TimeCreated>64481,59419.500162</TimeCreated>

<Property name="value">
<Type>%Float</Type>
</Property>

<Property name="startDate">
<Type>%Date</Type>
</Property>

<Property name="endDate">
<Type>%Date</Type>
</Property>

<Property name="regionResource">
<Type>fishnet.RegionResource</Type>
</Property>

<Property name="company">
<Type>fishnet.Company</Type>
</Property>

<Method name="SaveQuotas">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set st = $$$OK		
	try{		
	$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data,1))  		
	    // Open object by Id
	    set quota = ##class(fishnet.Quota).%OpenId(data.id,,.st)
      	// If can't open by Id-create new region
      	if $$$ISERR(st) set quota = ##class(fishnet.Quota).%New()
      	set quota.code = $ZCONVERT(data.code, "I", "UTF8")
      	set quota.name = $ZCONVERT(data.name, "I", "UTF8")
      	do quota.regionResource.Clear()
      	set quota.regionResource = $ZCONVERT(data.regionResource, "I", "UTF8")	
      	do quota.regionResource.Clear()
      	set quota.company = $ZCONVERT(data.company, "I", "UTF8")
      	do quota.startDate.Clear()
      	set quota.startDate = $ZCONVERT(data.startDate, "I", "UTF8")
      	do quota.endDate.Clear()
      	set quota.endDate = $ZCONVERT(data.endDate, "I", "UTF8")   	
		$$$THROWONERROR(st, quota.%Save())
	}
	catch ex{
		s st=st.AsStatus()
	}
	quit st
]]></Implementation>
</Method>

<Method name="GetQuotasByCompanyId">
<ClassMethod>1</ClassMethod>
<FormalSpec>companyId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	/*set st = $$$OK	
	try{
		set proxy = []		
		&sql(DECLARE CoCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM fishnet.Qo
		 	 WHERE )	
		
		&sql(OPEN CoCur)
		for  
		{	
			&sql(FETCH QoCur INTO :id) 
			quit:(SQLCODE '= 0)
			
			do proxy.%Push(##class(fishnet.Quota).%OpenId(id).CompanyToJSON())
		}		
		&sql(CLOSE CoCur)		
		w proxy.%ToJSON()
	}
	catch (ex){
		set st = ex.AsStatus()
	}	
	quit st*/
	
	set st = $$$OK
	
	try{
		set sql = "SELECT * "_
 				  "FROM fishnet.Quota "_
 				  "WHERE company = "_companyId_" "_
 				  "ORDER BY company"
 		 
 		// Вывод данных в формате JSON для произвольного sql запроса	
		do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
	}
	catch (ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^fishnet.QuotaD</DataLocation>
<DefaultData>QuotaDefaultData</DefaultData>
<IdLocation>^fishnet.QuotaD</IdLocation>
<IndexLocation>^fishnet.QuotaI</IndexLocation>
<StreamLocation>^fishnet.QuotaS</StreamLocation>
<Data name="QuotaDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>name</Value>
</Value>
<Value name="3">
<Value>region</Value>
</Value>
<Value name="4">
<Value>company</Value>
</Value>
<Value name="5">
<Value>resource</Value>
</Value>
<Value name="6">
<Value>value</Value>
</Value>
<Value name="7">
<Value>startDate</Value>
</Value>
<Value name="8">
<Value>endDate</Value>
</Value>
<Value name="9">
<Value>regionResource</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
